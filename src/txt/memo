Spring Cloud Gateway - Filter
rounting 정보 추가
    - 자바에서 처리
    - yml or properties에서 처리

Lamda -> 익명 클래스 -> 클래스나 인터페이스를 선언하지 않고 직접 인스턴스를 생성하고 소멸시킬 수 있음

Netty 내장 서버 : 비동식 방식의 서버
 - 비동기 방식의 서버를 사용하여 데이터를 사용할 때에는 ServerHttpRequest, ServerHttpResponse라는 객체를 사용

Spring Cloud Gateway - Global Filter
어떠한 Route 정보라도 공통적으로 실행될 수 있는 필터
Custom Filter -> 원하는 route에 개별적으로 설정 해줘야 함

boolean 형식의 변수는 isPreLogger 이런 형식으로 getter, setter가 선언됨.

Global Filter는 application.yml의 spring.cloud.gateway.default-filters에 등록함
이름 , 전달하고자 하는 파라미터를 등록

Global Filter는 모든 필터의 가장 처음에 시작이 되고 가장 마지막에 종료됨.

application.yml은 환경설정 정보 -> microService에 내장되어있음

Spring Cloud Gateway - Custom Filter (Logging)
Logging 필터가 제일 나중에 실행되고 제일 먼저 종료됨.

Gateway Client -> Gateway Handler -> Global Filter -> Custom Filter -> Logging Filter -> Proxied Service
Proxied Service : 추가로 구현한 서비스
순서로 실행되고, 처리가 끝나면 역순으로 종료된다.
-> OrderedGatewayFilter의 Ordered.HIGHEST_PRECEDENCE를 사용하면 가장 먼저 실행하게 할 수 있다.
-> OrderedGatewayFilter의 Ordered.LOWEST_PRECEDENCE를 사용하면 가장 나중에 실행하게 할 수 있다.
> 우선순위를 조절하면 원하는 형태로 출력할 수 있다.

OrderedGatewayFilter는 GatewayFilter를 구현시켜주는 자식 클래스

application.yml에 Custom Filter를 등록할 때 추가적인 파라미터가 필요하다면 name:을 붙여주고 이름을 작성해주어야 함.

Spring Cloud Gateway - Eureka 연동
Eureka Server : 서비스를 등록
Client에서 API Gateway를 이용하여 요청을 하게 되면,
요청정보가 Eureka Server로 전달되고 어디에 microService가 위치했는지 위치 정보를 전달받고 해당 정보로 포워딩 해줌